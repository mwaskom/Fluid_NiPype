import os
import os.path.join as pjoin

import nipype.interfaces.fsl as fsl
import nipype.interfaces.freesurfer as fs
import nipype.interfaces.io as nio
import nipype.interfaces.utility as util
import nipype.pipeline.engine as pe


project_dir = "/mindhive/gablab/fluid"
data_dir = pjoin(project_dir, "Data")
nipype_dir = pjoin(project_dir, "Analysis/Nipype")
analysis_dir = pjoin(nipype_dir, "tbss")
working_dir = pjoin(nipype_dir, "working", "tbss")


subjects = []

# Set up a node to supply subject ids
subjsource = pe.Node(util.IdentityInterface(fields=["subject_id"]),
                     iterables=("subject_id", subjects),
                     name="subjectsource")

# Grab the FA and B=0 images (for us, these were generated by dt_recon)
reggrabber = pe.Node(nio.DataGrabber(infields=["subject_id"],
                                     outfield=["fa_image", "lowb_image"],
                                     base_directory=data_dir,
                                     template="%s/dwi/%s.nii"),
                     name="reggrabber")
reggrabber.inputs.template_args = dict(fa_image=[["subject_id", "fa"]],
                                       lowb_image=[["subject_id", "lowb"]])

# Use BET to strip the lowb image and generate a mask
skullstrip = pe.Node(fsl.BET(frac=0.3, mask=True),
                     name="skullstrip")

# Use the brain mask to mask the FA image
maskfa = pe.Node(fsl.ImageMaths(op_string="-mas", suffix="_brain"), 
                 name="maskfa")

# Use bbregister to align the lowb image to the Freesurfer structural
bbregister = pe.Node(fs.BBRegister(init="fsl",
                                   contrast_type="t2",
                                   epi_mask=True,
                                   args="--tol1d 1e-3"),
                     name="bbregister")

# Set up a source node to grab the norm.mgz image
getbrain = pe.Node(nio.FreeSurferSource(), name="getbrain")

# Convert the norm.mgz image to nifti
cvtbrain = pe.Node(fs.MRIConvert(out_type="niigz"), name="cvtbrain")

# Use FLIRT to get an initial affine transformation to the MNI template
flirt = pe.Node(fsl.FLIRT(reference=fsl.Info.standard_image("MNI152_T1_1mm_brain.nii.gz"),
                          searchr_x=[-180,180],
                          searchr_y=[-180,180],
                          searchr_z=[-180,180]),

                name="flirt")

# Set up a source node to grab the nu.mgz image
gethead = pe.Node(nio.FreeSurferSource(), name="gethead")

# Convert the nu.mgz image to nifti
cvthead = pe.Node(fs.MRIConvert(out_type="niigz"), name="cvthead")

# Use FNIRT to get a nonlinear registration to the MNI template
fnirt = pe.Node(fsl.FNIRT(ref_file=fsl.Info.standard_image("MNI152_T1_1mm.nii.gz"),
                          config_file=pjoin(os.environ["FSLDIR"], "etc/flirtsch/T1_2_MNI152_2mm.cnf")),
                name="fnirt")

# Apply the warpfield to the masked FA image using the bbregister affine matrix
applywarp = pe.Node(fsl.ApplyWarp(interp="sinc",
                                  ref_file=fsl.Info.standard_image("MNI152_T1_1mm.nii.gz")),
                    name="applywarp")

# Set up the data sink node
regsink = pe.Node(nio.DataSink(base_directory=analysis_dir),
                  name="regsink")

# Define the registration workflow
reg = pe.Workflow(name="registration", base_dir=working_dir)

# Connect up the registration workflow
reg.connect([
    (subjsource,   reggrabber,  [("subject_id", "subject_id")]),
    (reggrabber,   skullstrip,  [("lowb_image", "in_file")]),
    (skullstrip,   maskfa,      [("mask_file", "in_file2")]),
    (skullstrip,   bbregister,  [("out_file", "source_file")]),
    (subjsource,   getbrain,    [("subject_id", "subject_id")]),
    (getbrain,     cvtbrain,    [("norm", "in_file")]),
    (subjsource,   gethead,     [("subject_id", "subject_id")]),
    (cvtbrain,     flirt,       [("out_file", "in_file")]),
    (gethead,      cvthead,     [("nu", "in_file")]),
    (flirt,        fnirt,       [("out_matrix_file", "affine_file")]),
    (cvthead,      fnirt,       [("out_file", "in_file")]),
    (bbregister,   applywarp,   [("out_fsl_file", "premat")]),
    (maskfa,       applywarp,   [("out_file", "in_file")]),
    (applywarp,    regsink,     [("out_file", "fa_warped.nii.gz")]),
    (subjsource,   regsink,     [("subject_id", "container")]),
    ])


